from BLE_CEEO import Yell, Listen
import time
import sensor
import math

# Initialize the camera sensor
sensor.reset()
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QQVGA)  # 160x120 resolution
sensor.skip_frames(time=2000)
sensor.set_auto_gain(False)  # Disable to prevent image washout
sensor.set_auto_whitebal(False)  # Disable to prevent image washout

# Define the horizontal center of the camera as a float
CAMERA_CENTER_X = 160.0 / 2.0  # 80.0 for 160x120 resolution

def calculate_epsilon():
    """
    Calculate the epsilon value based on the distance between the AprilTag
    and the horizontal center of the camera.
    """
    img = sensor.snapshot()
    for tag in img.find_apriltags():
        epsilon = tag.cx - CAMERA_CENTER_X  # Calculate distance from center
        return epsilon
    return None  # Return None if no tag is found

def peripheral(name): 
    try:
        p = Yell(name, interval_us=300, verbose=True)
        if p.connect_up():
            print('Driver connected')
            time.sleep(2)

            while True:
                epsilon = calculate_epsilon()
                if epsilon is not None:
                    payload = f"{epsilon:.2f}"  # Format epsilon value to 2 decimal places
                    p.send(payload)
                    print(f"Broadcasting epsilon: {payload}")
                
                if p.is_any:
                    print(p.read())

                if not p.is_connected:
                    print('lost connection')
                    break

                time.sleep(0.1)
    except Exception as e:
        print(e)
    finally:
        p.disconnect()
        print('closing up')

peripheral('Lucy')
